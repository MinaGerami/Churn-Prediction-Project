print("*")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
install.packages("readxl")
library(readxl)
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
View(Df)
View(Df)
View(Df)
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
View(Df)
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
View(Df)
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
View(one)
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
View(one)
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
View(Col)
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
View(Row)
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
Myindex
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyFeatures
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
MyValue
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
View(MyValue)
View(MyValue)
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
Df[1,2]
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
remove.packages("readxl")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
install.packages("readxl")
library(readxl)
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
View(Df)
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 5/1.R")
source("D:/BioinfCamp/AI/Files/Video 7/Feature R/Feature R.R")
source("D:/BioinfCamp/AI/Files/Video 10/R/1/1.R")
install.packages("rpart")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
data <- read.csv("Data.csv", stringsAsFactors = TRUE)
# خواندن فایل CSV
setwd("C:/Users/Irana/Desktop/Marketing/Github/Churn-Prediction-Project/R/Decision Tree")
data <- read.csv("Data.csv", stringsAsFactors = TRUE)
View(data)
tree_model <- rpart(churn ~ ., data = data, method = "class", parms = list(split = "information"))
View(tree_model)
rpart.plot(tree_model, type = 2, extra = 104, fallen.leaves = TRUE)
# نصب پکیج در صورت نیاز
install.packages("rpart")
install.packages("rpart.plot")
# بارگذاری پکیج‌ها
library(rpart)
library(rpart.plot)
# خواندن فایل CSV
setwd("C:/Users/Irana/Desktop/Marketing/Github/Churn-Prediction-Project/R/Decision Tree")
data <- read.csv("Data.csv", stringsAsFactors = TRUE)
# ساختن مدل درخت تصمیم
tree_model <- rpart(churn ~ ., data = data, method = "class", parms = list(split = "information"))
# ذخیره تصویر در قالب PNG با رزولوشن بالا
png("decision_tree.png", width = 3000, height = 2000, res = 300)  # کیفیت بالا
# ترسیم درخت
rpart.plot(tree_model,
type = 2,              # نشان دادن مقادیر split
extra = 104,           # نمایش درصد و تعداد نمونه‌ها
fallen.leaves = TRUE,  # نودهای برگ پایین
rounded = TRUE,        # نودهای گرد
box.palette = "RdYlGn")# رنگ‌بندی زیبا
install.packages("rpart.plot")
setwd("C:/Users/Irana/Desktop/Marketing/Github/Churn-Prediction-Project/R/Decision Tree")
data <- read.csv("Data.csv", stringsAsFactors = TRUE)
tree_model <- rpart(churn ~ ., data = data, method = "class", parms = list(split = "information"))
library(rpart)
library(rpart.plot)
setwd("C:/Users/Irana/Desktop/Marketing/Github/Churn-Prediction-Project/R/Decision Tree")
data <- read.csv("Data.csv", stringsAsFactors = TRUE)
tree_model <- rpart(churn ~ ., data = data, method = "class", parms = list(split = "information"))
# ذخیره تصویر در قالب PNG با رزولوشن بالا
png("decision_tree.png", width = 3000, height = 2000, res = 300)  # کیفیت بالا
# ترسیم درخت
rpart.plot(tree_model,
type = 2,              # نشان دادن مقادیر split
extra = 104,           # نمایش درصد و تعداد نمونه‌ها
fallen.leaves = TRUE,  # نودهای برگ پایین
rounded = TRUE,        # نودهای گرد
box.palette = "RdYlGn")# رنگ‌بندی زیبا
setwd("C:/Users/Irana/Desktop/Marketing/Github/Churn-Prediction-Project/R/Decision Tree")
data <- read.csv("Data.csv", stringsAsFactors = TRUE)
tree_model <- rpart(churn ~ ., data = data, method = "class", parms = list(split = "information"))
# ذخیره تصویر با کیفیت بالا به صورت PNG
png("decision_tree.png", width = 3000, height = 2000, res = 300)
# رسم درخت تصمیم
rpart.plot(tree_model,
type = 2,              # نمایش متغیر و دسته‌بندی
extra = 104,           # نمایش class + درصد + تعداد
fallen.leaves = TRUE,  # نودهای برگ در پایین
box.palette = "RdYlGn")# رنگ‌بندی برگ‌ها
# بستن فایل گرافیکی
dev.off()
print(tree_model)
print(tree_model)
plot(tree_model, uniform = TRUE, margin = 0.1)
text(tree_model, use.n = TRUE, all = TRUE, cex = 0.8)
png("decision_tree2.png", width = 3000, height = 2000, res = 300)
plot(tree_model, uniform = TRUE, margin = 0.1)
text(tree_model, use.n = TRUE, all = TRUE, cex = 0.8)
# بستن فایل گرافیکی
dev.off()
png("decision_tree3.png", width = 3000, height = 2000, res = 300)
rpart.plot(tree_model, type = 1, extra = 101, fallen.leaves = TRUE)
# بستن فایل گرافیکی
dev.off()
# ذخیره تصویر در قالب PNG با کیفیت بالا و اندازه بزرگتر
png("simple_tree4.png", width = 3000, height = 2000, res = 300)
# رسم ساختار درخت با فضای مناسب بین نودها
plot(tree_model, uniform = TRUE, margin = 0.2)  # margin بیشتر برای فضای کناری
# افزودن متن به نودها با سایز کوچکتر و بدون توهم
text(tree_model, use.n = TRUE, all = TRUE, cex = 0.6)  # کوچکتر کردن متن
dev.off()
# خواندن داده
data <- read.csv("Data.csv", stringsAsFactors = TRUE)
tree_model <- rpart(churn ~ ., data = data, method = "class", parms = list(split = "information"))
# گرفتن مسیر تصمیم‌گیری برای هر برگ
paths <- path.rpart(tree_model, nodes = rownames(tree_model$frame[tree_model$frame$var == "<leaf>", ]))
# چاپ مسیرها به صورت if-else ساده
for (i in seq_along(paths)) {
cat(paste0("Rule ", i, ":\n"))
cat(paste(paths[[i]], collapse = " AND "), "\n")
prediction <- as.character(tree_model$frame[rownames(tree_model$frame)[tree_model$frame$var == "<leaf>"], "yval"][[i]])
cat(paste("→ Prediction:", prediction, "\n\n"))
}
# بارگذاری پکیج‌ها
library(rpart)
library(grid)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
data <- read.csv("Data.csv", stringsAsFactors = TRUE)
tree_model <- rpart(churn ~ ., data = data, method = "class", parms = list(split = "information"))
paths <- path.rpart(tree_model, nodes = rownames(tree_model$frame[tree_model$frame$var == "<leaf>", ]))
# تولید متن قوانین ساده
rules_text <- c()
for (i in seq_along(paths)) {
rule <- paste(paths[[i]], collapse = " AND ")
prediction <- as.character(tree_model$frame[rownames(tree_model$frame)[tree_model$frame$var == "<leaf>"], "yval"][[i]])
rules_text[i] <- paste0("Rule ", i, ": IF ", rule, " → THEN churn = ", prediction)
}
rules_grob <- textGrob(paste(rules_text, collapse = "\n\n"), x = 0, y = 1, just = c("left", "top"), gp = gpar(fontsize = 14), default.units = "npc")
png("DecisionTreeRules.png", width = 3000, height = 4000, res = 300)
grid.newpage()
grid.draw(rules_grob)
dev.off()
